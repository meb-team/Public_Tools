#!/usr/bin/env perl
# v0.1.0
#########################################################################################
# rDNA and rRNA genes predictor									                        #
#########################################################################################
#                                                                                       #
# This program is free software: you can redistribute it and/or modify it under the     #
# terms of the GNU General Public License as published by the Free Software Foundation, #
# either version 3 of the License, or (at your option) any later version.               #
#                                                                                       #
#########################################################################################
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, ##
## INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A       ##
## PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT  ##
## HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION   ##
## OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE      ##
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                              ##
#########################################################################################

=head1 NAME

    rna_hmm

=head1 SYNOPSIS

    perl rna_hmm [-i input_file] 

=head1 DESCRIPTION

     This scripts predicts rRNA by using HMMER to identify DNA sequence
     containing rRNA sequences.  

=head1 OPTIONS  
 
The options for the program as as follows:

General:

    -h	--help		Print this help and exit.
    
        --version	Print version and exit.
        
    -v	--verbose	Verbose mode.
        
    -i  --input		Name of input file in fast(a/q) format.
                    Can be in 'fast(a/q).gz' format. 
    
  
Outputs:

        --outdir	Output folder (default '').
    
    -p  --prefix	Filename output prefix. 
                        
        --gff       Boolean option. If not used print gene report in STDOUT. 
    
    -f	--fasta		Produce a rna fasta file from prediction. 

Predictions:
    
        --hmm-v		Version of hmm software to use. 
                            hmmsearch for hmmsearch in your $PATH
                            nhmmer for nhmmer in your $PATH (default)
                            hmmsearch2 to hmmsearch from HMMER2
        
        --hmm    	Path of the directory containing hmm database.
                        One hmm file by kingdom and by molecule.
                        (default : rna_hmm/HMMs)
        
    -k  --kingdom	Annotation mode: arc,bac and/or euk (default 'all')
            Separate kingdom by a coma if you want to explore more than one. 
    
    -e  --Evalue	Report sequences <= this E-value threshold in output during hmmsearch (default '0.01')
    
        --lencutoff	Proportional length threshold to label as partial (default '0.8')
  
        --reject	Proportional length threshold to reject prediction (default '0.5')
 
Computation:

    -t  --threads	Number of threads threads/cores/CPUs to use (default '4')


=head1 AUTHORS

Written by Corentin Hochart (corentin.hochart@uca.fr)
UMR CNRSS 6023 Laboratoire Genome et Environement (LMGE).
Released under the terms of the GNU General Public License v3.

=head1 VERSION

version 0.1.0

=cut

#~ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
#~ libraries

use warnings;
use strict;
use Bio::SeqIO;
use Bio::Seq;
use Bio::Perl;
use File::Copy;
use File::Basename;
use FindBin;
use Getopt::Long;
use List::Util qw(max);
use Pod::Usage;
use POSIX ":sys_wait_h";
use Time::Piece;
use Time::Seconds;

#~ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
#~ Scalars
#~ 		Global
my $help; 			# help flag
my $verbose;		# debugging flag
my $exe = $FindBin::RealScript;
my $force;
my $version;
my $VERSION="0.1";
my $date=date();
my $hmm_version="nhmmer";
my $hmmsearch2path="$FindBin::RealBin/../binaries/hmmsearch";
my $PROKP;

#~ 		Others
my $input_fasta;	# name of input file in fasta format
my $tmp_fasta;
my $outdir='rna-hmm_'.(localtime->mdy(''));;			# output directroy of the project
my $prefix="";			# prefix for output file
my $output_name;	# name of output file
my $gff_output;		# print in a file if $prefix is defined else pint in STDOUT
my $fasta;
my $split;
my $kingdom;
my $hmm_path="$FindBin::RealBin/../HMMs";
my $evalue_co=0.01;
my $threads=4;

my $lencutoff=0.8;
my $reject=0.5;

my $count=0;

my $tno=0;
my $last;

#~ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
#~ tables
my @kingdom=("arc","bac","euk");
my @mol=("lsu","ssu","tsu");
my @hmm_resu;

#~ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
#~ hashes
my %rec;
my %read2kingdom;
my %resu;
my %fasta;

my %dict_rRNA = ("arc_lsu"=>"Archaeal:23S_rRNA","arc_ssu"=>"Archaeal:16S_rRNA","arc_tsu"=>"Archaeal:5S_rRNA",
"bac_lsu"=>"Bacterial:23S_rRNA","bac_ssu"=>"Bacterial:16S_rRNA","bac_tsu"=>"Bacterial:5S_rRNA",
"euk_lsu"=>"Eukaryotic:28S_rRNA","euk_ssu"=>"Eukaryotic:18S_rRNA","euk_tsu"=>"Eukaryotic:5S_rRNA");
my %LENG = (
  "5S_rRNA"  =>119, "16S_rRNA"=>1585, "23S_rRNA"=>3232,
  "5S_rRNA"  =>119, "5_8S_rRNA"=>156, "18S_rRNA"=>1869, "28S_rRNA"=>2912, "12S_rRNA"=>954,
);


#~ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
#~ function

sub error {
    #~ management of error messages and help page layout, will stop execution
    #~ local arguments passed:1st, error message to output
    my $error = shift;
    my $filename = ($0);
    pod2usage(-message => "$filename (error): $error. Execution halted.", -verbose => 2, -noperldoc => 1);
    exit(2);
}

sub warning {
    #~ management of warnings and execution carry on
    #~ local arguments passed: 1st, warning message to output
    if ($verbose) {
        my $message = shift;
        my $filename = $0;
        warn("$filename (info): ".$message."\n");
    }
}

sub version {
  print STDERR "$exe $VERSION\n";
  exit;
}

sub num_cpu {
    my($num) = qx(grep -c ^processor /proc/cpuinfo);
    return $1 if $num =~ m/^(\d+)/;
}

sub fasta_format {
    my $seq=shift;
    $seq=~s/(.{60})/$1\n/g;
    chomp $seq;
    return $seq;
}
   
sub parse_hmmsearch {
    my $resu = shift ;
    my $resus;
    open(File,$resu);
    while(my $line=<File>){
        chomp $line;
        unless($line=~m/^#/){
            #~ my @line = split(/\s+/,$line);
            (my $read,my $acc,my $tlen,my $qname,my $qaccr,my $qlen,my $seq_evalue,my $seq_score,my $seq_bias,
            my $seq_num,my $seq_of,my $dom_cEvalue,my $dom_iEvalue,my $dom_score,my $dom_bias,
            my $hmm_start,my $hmm_end,my $dom_start,my $dom_end,my $env_start,my $env_end) = split(/\s+/,$line);
            if ($read){
                if ($dom_iEvalue<$evalue_co){
                    $resus.=join("\t",$read,$qname,$dom_iEvalue,$dom_score,$dom_start,$dom_end)."\n";
                }
            }
        }
    }
    close File;
    return $resus;
}

sub parse_hmmsearch2 {
    my $resu = shift ;
    my $resus;
    my $qname;
    open(File,$resu);
    while(my $line=<File>){
        chomp $line;
        if ($line=~m/Query HMM:\s+\w+\.\w+ \[(.+)\]/){$qname=$1;print $1,"\n";}
        elsif ($line=~m/\d+\/\d+\s+(\d+)\s+(\d+)\s+[\[\.\]][\[\.\]]\s+\d+\s+\d+\s+[\[\.\]][\[\.\]]\s+([0-9\-e\.]+)\s+([0-9\-e\.]+)/){
            #~ my @line = split(/\s+/,$line);
            (my $read,my $domain,my $seqf,my $seqt,my $dot,my $hmmf,my $hmmt,my $char,my $score,my $evalue ) = split(/\s+/,$line);
            if ($read){
                if ($evalue<$evalue_co){
                    $resus.=join("\t",$read,$qname,$evalue,$score,$seqf,$seqt)."\n";
                }
            }
        }
    }
    close File;
    return $resus;
}

sub parse_nhmmer {
    my $resu = shift ;
    my $resus;
    open(File,$resu);
    while(my $line=<File>){
        chomp $line;
        unless($line=~m/^#/){
            (my $read,my $acc,my $qname,my $qaccr,
            my $hmm_start,my $hmm_end,my $ali_start,my $ali_end,my $env_start,my $env_end,
            my $seqlen, my $strand, my $Evalue, my $score, my $bias, my $desc) = split(/\s+/,$line);
            if ($read){
                if ($Evalue<$evalue_co){
                    $resus.=join("\t",$read,$qname,$Evalue,$score,$ali_start,$ali_end)."\n";
                }
            }
        }
    }
    close File;
    return $resus;
}

sub clean_up { 
    foreach my $file (@_){
        if(-e $file){
            #~ &warning("clean_up(): Deleting tempory file '$file'");
            unlink ($file);
        }
    }
}

sub gff_sort {
  # sort by seqid, then start pos
  return ($a->[0] cmp $b->[0]) || ($a->[3] <=> $b->[3]);
}

sub date { 
  my $time = shift || time;    #$time par defaut vaut le time actuel 
  my ( $seconde, $minute, $heure, $jour, $mois, $annee, $jour_semaine, $jour_annee, $heure_hiver_ou_ete ) 
    = localtime($time); 
  $mois  += 1; 
  $annee += 1900; 
  
  # On rajoute 0 si le chiffre est compris entre 1 et 9 
  foreach ( $seconde, $minute, $heure, $jour, $mois, $annee ) { 
    s/^(\d)$/0$1/; 
  } 
  
  my %ladate = ( 
    "date"         => "$jour-$mois-$annee", 
    "heure"        => "$heure:$minute:$seconde", 
    "jour_semaine" => $jour_semaine, 
    "jour_annee"   => $jour_annee, 
    "hiverOuEte"   => $heure_hiver_ou_ete, 
  ); 
  return \%ladate; 
}

sub check_tool {
    my $toolname=shift;
    my $tool_path = find_exe($toolname);
    &error("Can't find '$toolname' in your \$PATH") if !$tool_path ;
    &warning("Looking for $toolname - found $tool_path");
}

sub find_exe {
    my($tool) = shift;
    for my $dir (File::Spec->path) {
        my $exe = File::Spec->catfile($dir, $tool);
        return $exe if -x $exe; 
    }
    return;
}

sub runcmd {
  &warning("Running:", @_);
  system(@_)==0 or err("Could not run command:", @_);
}


#~ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 

MAIN: {
    GetOptions(
            "help|h" => \$help,				# help flag
            "verbose|v!" => \$verbose,		# debugging flag
            "version!" => \$version,		# version flag
            "force!"	=> \$force,
            "hmm-v=s" => \$hmm_version,		# version of hmm software
            
            "input|i=s" => \$input_fasta, 	# name of input file in fasta format
            "outdir=s" => \$outdir,			# name of output directory
            
            "prefix=s" 	=> \$prefix,		# name of output file
            "gff!"		=> \$gff_output,
            "fasta|f!" 	=> \$fasta,			# print or not a rna fasta file
            "split!"	=>	\$split,		# split molecule in different file if 'fasta' activate
            
            "hmm|HMM=s" => \$hmm_path, 		# path of hmm database
            "kingdom|k=s" => \$kingdom,		# annotation mode
            
            "Evalue|e=s" => \$evalue_co,	# evalue cut-off for hmmsearch
            "lencutoff=s" => \$lencutoff, 	# proportional length threshold to label as partial
            "reject=s" => \$reject,			# proportional length threshold to reject prediction
            
            "threads|t=s" => \$threads,		# number of threads for hmmsearch

        );
            
    if ($help) {
        pod2usage(-verbose => 2, -noperldoc => 1);
        exit;
    }
    
    &version if ($version);
    my $user = $ENV{ USER };
    &warning("Hi $user! Let's do some good jobs together.");
    &warning("First. Check tools and options.");

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
&error("You did not specify an input file containing the query sequence. Please use '--input' option") unless $input_fasta;
# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
# check tools 
if($hmm_version eq "hmmsearch2"){
    &error("hmmsearch v2 do not find in rna_hmm/binaries") unless (-e "$hmmsearch2path")
    &warning("Looking for hmmsearch v2 - found $hmmsearch2path");
}
elsif($hmm_version eq "hmmsearch" || $hmm_version eq "nhmmer"){
    &check_tool($hmm_version);
}
else{
    &error("$hmm_version: Wrong parameter for '--hmm-v'"); 
}

# check options
if (-d $outdir) {
    if ($force) { 
        # &warning("Re-using existing --outdir '$outdir'.")
        runcmd("rm -r \Q$outdir\E");
        runcmd("mkdir -p \Q$outdir\E");
    }
    else {
        &error("Folder '$outdir' already exists Please change --outdir or use --force");
    }
}
elsif($outdir){    
    &warning("Creating new output folder: $outdir");
    runcmd("mkdir -p \Q$outdir\E");
}

if($prefix){
    $output_name="$outdir/$prefix.rna_hmm";
    $gff_output="$outdir/$prefix.rna_hmm.gff"
}
else{
    if($input_fasta){
        if(basename($input_fasta)=~m/(.+)\.\w+\.gz$/){
            $output_name="$outdir/$1.rna_hmm";
        }
        else{
            if(basename($input_fasta)=~m/(.+)\.\w+/){
                $output_name="$outdir/$1.rna_hmm";
            }
        }
    }
}

#~ Check kingdom parameter
if ($kingdom){
    unless($kingdom eq 'all'){
        @kingdom=split(/,/,$kingdom);
        foreach(@kingdom){
            warning("$_ : Wrong parameter for '--kingdom' option") unless($_ eq "arc" || $_ eq "bac" || $_ eq "euk");
        }
    }
}

foreach(@kingdom){
    my $kingdom=$_;
    foreach(@mol){
        my $mol=$_;
        my $hmmdb="$hmm_path/$kingdom\_$mol.hmm";
        #~ &error("$hmmdb : File do not exist") unless (-e $hmmdb)
        &warning("$hmmdb : File do not exist") unless (-e $hmmdb)
    }
}
        
#~ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
#~ Create tempory fasta file. 
#~ Check by the same time if the input_file is in fasta format.
my $in;

if(basename($input_fasta)=~m/(.+)\.\w+\.gz$/){
    open my $zcat, "zcat $input_fasta |" or die $!;
    $in=Bio::SeqIO->new(
                        -fh=>$zcat,
                        #~ -format=>'fastq'
                        );
        $tmp_fasta="$outdir/$1.rna_hmm.fa";
    if($hmm_version eq "nhmmer"){
        open(Tmpfa,">$tmp_fasta");                     
        while(my $rec = $in->next_seq() ){
            print Tmpfa ">seq_$count","\n",&fasta_format($rec->seq()),"\n";
            $rec{"seq_$count"} = $rec;
            $count++;
        }
        close Tmpfa;
    }
    else{
        open(Tmpfa,">$tmp_fasta");                     
        while(my $rec = $in->next_seq() ){
            print Tmpfa ">seq_$count","\n",&fasta_format($rec->seq),"\n";
            $rec{"seq_$count"} = $rec;
            print Tmpfa ">seq_$count","|rev","\n",&fasta_format($rec->revcom->seq),"\n";
            $count++;
        }
        close Tmpfa;
    }
    close $zcat;
}
else{
    unless($input_fasta=~m/PROKP/ or $input_fasta=~m/MEnTALI/){
        &warning("Create tempory fasta file.");	
        $in=Bio::SeqIO->new(   
                                    #~ -format => 'Fastq',
                                    -file   => $input_fasta,
                                );
        $tmp_fasta="$output_name.fa";
        if($hmm_version eq "nhmmer"){
            open(Tmpfa,">$tmp_fasta");                     
            while(my $rec = $in->next_seq() ){
                print Tmpfa ">seq_$count","\n",&fasta_format($rec->seq),"\n";
                $rec{"seq_$count"} = $rec;
                $count++;
            }
            close Tmpfa;
        }
        else{
            open(Tmpfa,">$tmp_fasta");                     
            while(my $rec = $in->next_seq() ){
                print Tmpfa ">seq_$count","\n",&fasta_format($rec->seq),"\n";
                $rec{"seq_$count"} = $rec;
                print Tmpfa ">seq_$count","|rev","\n",&fasta_format($rec->revcom->seq),"\n";
                $count++;
            }
            close Tmpfa;
        }
    }
    else{
        $PROKP=1;
        $tmp_fasta=$input_fasta;	
        $in=Bio::SeqIO->new(   
            #~ -format => 'Fastq',
            -file   => $input_fasta,
        );
        while(my $rec = $in->next_seq() ){$rec{$rec->id}=$rec}
    }
}

#~ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
#~ Start of the analyse
&warning("Start of script.");

&warning("Launch hmmsearch.");
foreach(@kingdom){
    my $kingdom=$_;
    foreach(@mol){
        my $mol=$_;
        my $hmm_lib= $hmm_path."/$kingdom\_$mol.hmm";
        unless(-e $hmm_lib){next}
        my $out=$output_name.".$kingdom\_$mol.out";
        my $domtblout=$output_name.".$kingdom\_$mol.dom";
        if($hmm_version eq "hmmsearch"){
            my $cmd = "hmmsearch --cpu $threads -o $out --domtblout $domtblout -E $evalue_co $hmm_lib $tmp_fasta";
            system($cmd);
            my $hmm_resu=parse_hmmsearch($domtblout);
            push @hmm_resu, $hmm_resu;
            &clean_up($out,$domtblout);
        }
        elsif($hmm_version eq "hmmsearch2"){
            my $cmd="$hmmsearch2path --compat -E $evalue_co $hmm_lib $tmp_fasta > $domtblout";
            system($cmd);
            my $hmm_resu=parse_hmmsearch2($domtblout);
            push @hmm_resu, $hmm_resu;
            &clean_up($domtblout);
            
        }
        elsif($hmm_version eq "nhmmer"){
            my $cmd="nhmmer --cpu $threads -o $out --tblout $domtblout -E $evalue_co $hmm_lib $tmp_fasta";
            system($cmd);
            my $hmm_resu=parse_nhmmer($domtblout);
            push @hmm_resu, $hmm_resu;
            &clean_up($out,$domtblout);
        }
    }
}

&warning("Sort hmmsearch results.");
foreach(@hmm_resu){
    if($_){
        my @hit=split(/\n/);
        foreach(@hit){
            my @line=split("\t");
            my $read=$line[0];
            my @read=split(/\|/,$read);
            my $evalue=$line[2];
            my $score=$line[3];
            my @qname=split(/_/,$line[1]);
            my $kingdom=$qname[0];
            if(exists $read2kingdom{$read[0]}[0]){
                if ($evalue <= $read2kingdom{$read[0]}[0] and $score > $read2kingdom{$read[0]}[2]){
                    $read2kingdom{$read[0]}[0]=$evalue;
                    $read2kingdom{$read[0]}[1]=$kingdom;
                    $read2kingdom{$read[0]}[2]=$score;
                }
            }
            else{
                $read2kingdom{$read[0]}[0]=$evalue;
                $read2kingdom{$read[0]}[1]=$kingdom;
                $read2kingdom{$read[0]}[2]=$score;
            }
        }
    }
}

if(-e "$output_name.seq.fasta"){`rm $output_name.seq.fasta`}

my @feat;
HIT: 
foreach(@hmm_resu){
    if($_){
        my @hit=split(/\n/);
        foreach(@hit){
            (my $read,my $feature_type,my $evalue,my $score,my $r_start,my $r_end)=split("\t");
            my @read=split(/\|/,$read);
            my @feature_type=split(/_/,$feature_type);
            my $kingdom=$feature_type[0];
            my ($king,$gene)=split(/:/,$dict_rRNA{$feature_type});
            if($read2kingdom{$read[0]}[1] eq $kingdom){
                $feature_type = $dict_rRNA{$feature_type};
                my $strand="+";
                my $rec=$rec{$read[0]};
                my $seq;
                if($read[$#read] eq "rev"){
                    $strand="-";
                    my $length=$rec->length;
                    $r_start=$length-$r_start+1;
                    $r_end=$length-$r_end+1;
                    $seq=$rec->subseq(
                        $r_end,
                        $r_start,
                    );
                    ($r_start,$r_end)=($r_end,$r_start);
                }
                elsif($r_start > $r_end){
                    $strand="-";
                    $seq=$rec->subseq(
                        $r_end,
                        $r_start,
                    );
                    ($r_start,$r_end)=($r_end,$r_start);
                }
                else{
                    $seq=$rec->subseq(
                        $r_start,
                        $r_end,
                    );
                }
                $feature_type=~s/_/ /;
                my $length=length($seq);
                my $prod='';
                my $note='';
                if ( $length < int($reject * $LENG{$gene}) ) {
                    &warning("Rejecting short $length nt predicted $gene. Adjust via --reject option.");
                    next;
                }
                elsif ($length < int($lencutoff * $LENG{$gene})){
                    #~ $note = sprintf ";note=aligned only %d%%", (100*$length/$LENG{$gene}),;
                    $note = sprintf ";note=aligned only %d percent", (100*$length/$LENG{$gene}),;
                    $prod .= " (partial)";
                }
                push @feat, [
                    $rec->display_id,"rna_hmm:$VERSION",'rRNA',$r_start,$r_end,$score,$strand,'.',"$feature_type$prod$note"
                ];
                if($fasta){
                    $fasta{$rec->display_id}{$r_start}{$r_end}= 
                        sprintf ">%s /length=$length /start=$r_start /end=$r_end /strand=$strand $feature_type$prod\n%s\n",$rec->display_id,&fasta_format($seq);
                }
            }
        }
    }
}


&warning("Create rDNA positions file.");
my $gff_header="##gff-version
##source-version rna_hmm.pl
##date $date->{date}
##Type DNA\n";
$gff_header.=join ("\t",'##seq_name','method','feature','start','end','score','strand','frame','gene',"\n");
$gff_header.="#---------------------------------------------------------------------------------------------------------\n";

my $fh;
if ($gff_output) {
    open $fh, '>', $gff_output;
    select $fh;
}
print $gff_header;
close $fh if ($gff_output);

my $fh2;
for my $row (sort { gff_sort } @feat) {
    
    if ($gff_output) {
        open $fh2, '>>', $gff_output;
        select $fh2;
    }
    print join("\t", @$row),"\n";
    close $fh2 if ($gff_output);
    
    if($fasta){
        unless($last){$last=@$row[0]};
        if($last eq @$row[0]){
            $tno++;
        }
        else{
            $tno=1;
        }
        $fasta{@$row[0]}{@$row[3]}{@$row[4]}=~s/^>([^ ]+)/>$1\.$tno/;
        my $outfa="$output_name";
        if($split){
            $outfa.=".ssu" if (@$row[8]=~m/1[68]S/); 
            $outfa.=".lsu" if (@$row[8]=~m/2[38]S/); 
            $outfa.=".tsu" if (@$row[8]=~m/5S/); 
        }
        $outfa.=".seq.fa";
        open(FASTA,">>$outfa");
        print FASTA $fasta{@$row[0]}{@$row[3]}{@$row[4]};
        close FASTA;
        $last=@$row[0];
    }
}
clean_up("$tmp_fasta");
&warning("End of script.");

}
